'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DecoratePass = function () {
  function DecoratePass() {
    _classCallCheck(this, DecoratePass);
  }

  _createClass(DecoratePass, [{
    key: '_processDefinitionKeys',


    /**
     * @param {string} definitionId
     * @private
     */
    value: function _processDefinitionKeys(definitionId) {
      var definition = this._container.definitions.get(definitionId);

      if (definition.decorationPriority) {
        this._priority[definition.decorationPriority] = {
          name: definitionId,
          definition: definition
        };
      } else if (definition.decoratedService && !definitionId.includes(DecoratePass.POSTFIX_INNER)) {
        this._priority.push({ name: definitionId, definition: definition });
      }
    }

    /**
     * @param {object} decorate
     * @private
     */

  }, {
    key: '_processDecorates',
    value: function _processDecorates(decorate) {
      this._container.setDefinition(decorate.name + '.' + DecoratePass.POSTFIX_INNER, this._container.definitions.get(decorate.definition.decoratedService));
      decorate.definition.public = true;
      this._container.setDefinition(decorate.definition.decoratedService, decorate.definition);
    }

    /**
     * @param {ContainerBuilder} container
     */

  }, {
    key: 'process',
    value: function process(container) {
      this._container = container;
      this._priority = [];

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = container.definitions.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var definitionId = _step.value;

          this._processDefinitionKeys(definitionId);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var decorates = this._priority.filter(function (item) {
        return item !== null;
      });
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = decorates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var decorate = _step2.value;

          this._processDecorates(decorate);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }], [{
    key: 'POSTFIX_INNER',

    /**
     * @return {string}
     */
    get: function get() {
      return 'inner';
    }
  }]);

  return DecoratePass;
}();

exports.default = DecoratePass;