'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _PassConfig = require('../PassConfig');

var _PassConfig2 = _interopRequireDefault(_PassConfig);

var _OptimizePass = require('./OptimizePass');

var _OptimizePass2 = _interopRequireDefault(_OptimizePass);

var _RemovePass = require('./RemovePass');

var _RemovePass2 = _interopRequireDefault(_RemovePass);

var _DecoratePass = require('./DecoratePass');

var _DecoratePass2 = _interopRequireDefault(_DecoratePass);

var _ProcessMethodNotFoundException = require('../Exception/ProcessMethodNotFoundException');

var _ProcessMethodNotFoundException2 = _interopRequireDefault(_ProcessMethodNotFoundException);

var _WrongCompilerPassTypeException = require('../Exception/WrongCompilerPassTypeException');

var _WrongCompilerPassTypeException2 = _interopRequireDefault(_WrongCompilerPassTypeException);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CompilerPass = function () {
  /**
   * @param {ContainerBuilder} container
   */
  function CompilerPass(container) {
    _classCallCheck(this, CompilerPass);

    this._container = container;
    this.beforeOptimization = [];
    this.optimize = [];
    this.beforeRemoving = [];
    this.remove = [];
    this.afterRemoving = [];
  }

  /**
   * @param {string} type
   * @param {number} priority
   * @returns {number}
   */


  _createClass(CompilerPass, [{
    key: '_getCompilerPassPriorityNumber',
    value: function _getCompilerPassPriorityNumber(type, priority) {
      if (this[type][priority]) {
        return this._getCompilerPassPriorityNumber(type, priority + 1);
      }

      return priority;
    }

    /**
     * @param {*} compilerPass
     * @param {string} type
     * @param {number} priority
     */

  }, {
    key: 'register',
    value: function register(compilerPass, type, priority) {
      if (typeof compilerPass.process !== 'function') {
        throw new _ProcessMethodNotFoundException2.default(compilerPass.constructor.name);
      }

      if (!_PassConfig2.default.isValidType(type)) {
        throw new _WrongCompilerPassTypeException2.default(type);
      }

      var arrayLevel = this._getCompilerPassPriorityNumber(type, priority);
      this[type][arrayLevel] = compilerPass;
    }

    /**
     * @param {string} type
     * @private
     */

  }, {
    key: '_checkAndAdd',
    value: function _checkAndAdd(type) {
      if (this._container._compilerPass[type].length === 0) {
        if (type === _PassConfig2.default.TYPE_BEFORE_OPTIMIZATION) {
          this.register(new _DecoratePass2.default(), type, 0);
        } else if (type === _PassConfig2.default.TYPE_OPTIMIZE) {
          this.register(new _OptimizePass2.default(), type, 0);
        } else if (type === _PassConfig2.default.TYPE_REMOVE) {
          this.register(new _RemovePass2.default(), type, 0);
        }
      }
    }

    /**
     * @param {string} type
     */

  }, {
    key: 'process',
    value: function process(type) {
      this._checkAndAdd(type);

      this[type] = this[type].filter(function (i) {
        return i !== null;
      });

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this[type][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var compilerPass = _step.value;

          compilerPass.process(this._container);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }]);

  return CompilerPass;
}();

exports.default = CompilerPass;