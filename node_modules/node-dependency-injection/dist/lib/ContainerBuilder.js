'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Definition = require('./Definition');

var _Definition2 = _interopRequireDefault(_Definition);

var _PassConfig = require('./PassConfig');

var _PassConfig2 = _interopRequireDefault(_PassConfig);

var _Compiler = require('./Compiler');

var _Compiler2 = _interopRequireDefault(_Compiler);

var _CompilerPass = require('./CompilerPass');

var _CompilerPass2 = _interopRequireDefault(_CompilerPass);

var _InstanceManager = require('./InstanceManager');

var _InstanceManager2 = _interopRequireDefault(_InstanceManager);

var _DefinitionNotFoundException = require('./Exception/DefinitionNotFoundException');

var _DefinitionNotFoundException2 = _interopRequireDefault(_DefinitionNotFoundException);

var _LoadMethodNotFoundException = require('./Exception/LoadMethodNotFoundException');

var _LoadMethodNotFoundException2 = _interopRequireDefault(_LoadMethodNotFoundException);

var _LoggerWarnMethodNotFoundException = require('./Exception/LoggerWarnMethodNotFoundException');

var _LoggerWarnMethodNotFoundException2 = _interopRequireDefault(_LoggerWarnMethodNotFoundException);

var _WrongDefinitionException = require('./Exception/WrongDefinitionException');

var _WrongDefinitionException2 = _interopRequireDefault(_WrongDefinitionException);

var _FrozenContainerException = require('./Exception/FrozenContainerException');

var _FrozenContainerException2 = _interopRequireDefault(_FrozenContainerException);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ContainerBuilder = function () {
  /**
   * @param {boolean} containerReferenceAsService
   * @param {String} defaultDir
   */
  function ContainerBuilder() {
    var containerReferenceAsService = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var defaultDir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, ContainerBuilder);

    this._definitions = new Map();
    this._parameters = new Map();
    this._alias = new Map();
    this._container = new Map();
    this._frozen = false;
    this._compilerPass = new _CompilerPass2.default(this);
    this._extensions = [];
    this._logger = console;
    this._instanceManager = undefined;
    this._containerReferenceAsService = containerReferenceAsService;
    this._defaultDir = defaultDir;
  }

  /**
   * @returns {String}
   */


  _createClass(ContainerBuilder, [{
    key: 'register',


    /**
     * @param {string|number} id
     * @param {*|null} object
     * @param {Array} args
     * @returns {Definition}
     */
    value: function register(id) {
      var object = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

      if (!this.frozen) {
        var definition = new _Definition2.default();
        definition.Object = object;
        definition.args = args;

        if (!object) {
          definition.synthetic = true;
        }

        return this.setDefinition(id, definition);
      }

      throw new _FrozenContainerException2.default();
    }

    /**
     * @return {InstanceManager}
     */

  }, {
    key: 'get',


    /**
     * @param {string} id
     */
    value: function get(id) {
      return this.instanceManager.getInstance(id);
    }
  }, {
    key: 'compile',
    value: function compile() {
      new _Compiler2.default(this).run();
    }

    /**
     * @param {*} compilerPass
     * @param {string} type
     * @param {number} priority
     */

  }, {
    key: 'addCompilerPass',
    value: function addCompilerPass(compilerPass) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _PassConfig2.default.TYPE_BEFORE_OPTIMIZATION;
      var priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      this._compilerPass.register(compilerPass, type, priority);
    }

    /**
     * @param {string} alias
     * @param {string} id
     */

  }, {
    key: 'setAlias',
    value: function setAlias(alias, id) {
      this._alias.set(alias, id);
    }

    /**
     * @param {string} id
     * @param {Definition} definition
     * @returns {Definition}
     */

  }, {
    key: 'setDefinition',
    value: function setDefinition(id, definition) {
      if (definition instanceof _Definition2.default) {
        this._definitions.set(id, definition);

        return definition;
      }

      throw new _WrongDefinitionException2.default();
    }

    /**
     * @param {string} name
     * @returns {Map}
     */

  }, {
    key: 'findTaggedServiceIds',
    value: function findTaggedServiceIds(name) {
      var taggedServices = new Map();
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this._definitions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _ref = _step.value;

          var _ref2 = _slicedToArray(_ref, 2);

          var id = _ref2[0];
          var definition = _ref2[1];

          if (definition.tags.some(function (tag) {
            return tag.name === name;
          })) {
            taggedServices.set(id, definition);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return taggedServices;
    }

    /**
     * @param {string} key
     * @param {string|Array} value
     */

  }, {
    key: 'setParameter',
    value: function setParameter(key, value) {
      if (typeof value !== 'string' && !Array.isArray(value) && typeof value !== 'boolean' && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {
        throw new TypeError('The expected value is not a flat string, an array, a boolean or an object');
      }

      this._parameters.set(key, value);
    }

    /**
     * @param {string} key
     * @returns {string|Array}
     */

  }, {
    key: 'getParameter',
    value: function getParameter(key) {
      return this._parameters.get(key);
    }

    /**
     * @param {string} key
     * @returns {boolean}
     */

  }, {
    key: 'hasParameter',
    value: function hasParameter(key) {
      return this._parameters.has(key);
    }

    /**
     * @param {string} key
     * @returns {boolean}
     */

  }, {
    key: 'hasDefinition',
    value: function hasDefinition(key) {
      return this._definitions.has(key);
    }

    /**
     * @param {string} key
     * @returns {boolean}
     */

  }, {
    key: 'has',
    value: function has(key) {
      return this._definitions.has(key) || this._parameters.has(key) || this._alias.has(key);
    }

    /**
     * @param {string} method
     * @param {string} key
     * @returns {Definition|boolean}
     * @private
     */

  }, {
    key: '_definition',
    value: function _definition(method, key) {
      if (this._definitions.has(key)) {
        return this._definitions[method](key);
      }

      throw new _DefinitionNotFoundException2.default(key);
    }

    /**
     * @param {string} key
     * @returns {Definition}
     */

  }, {
    key: 'getDefinition',
    value: function getDefinition(key) {
      return this._definition('get', key);
    }

    /**
     * @param {string} key
     * @returns {boolean}
     */

  }, {
    key: 'removeDefinition',
    value: function removeDefinition(key) {
      return this._definition('delete', key);
    }

    /**
     * @param {string} key
     * @returns {Promise}
     */

  }, {
    key: 'findDefinition',
    value: function findDefinition(key) {
      key = this._alias.get(key) || key;

      if (this._definitions.has(key)) {
        return this._definitions.get(key);
      }

      throw new _DefinitionNotFoundException2.default(key);
    }

    /**
     * @param {*} extension
     */

  }, {
    key: 'registerExtension',
    value: function registerExtension(extension) {
      if (typeof extension.load !== 'function') {
        throw new _LoadMethodNotFoundException2.default(extension.constructor.name);
      }

      this._extensions.push(extension);
    }

    /**
     * @returns {Array}
     */

  }, {
    key: 'set',


    /**
     * @param {string} id
     * @param {*} instance
     */
    value: function set(id, instance) {
      this._container.set(id, instance);
    }

    /**
     * @param {string} id
     */

  }, {
    key: 'remove',
    value: function remove(id) {
      this._container.delete(id);
    }

    /**
     * @param {string} id
     * @returns {boolean}
     */

  }, {
    key: 'isSet',
    value: function isSet(id) {
      return this._container.has(id);
    }

    /**
     * @returns {Console|*}
     */

  }, {
    key: 'defaultDir',
    get: function get() {
      return this._defaultDir;
    }

    /**
     * @returns {boolean}
     */

  }, {
    key: 'containerReferenceAsService',
    get: function get() {
      return this._containerReferenceAsService;
    }

    /**
     * @returns {Map}
     */

  }, {
    key: 'definitions',
    get: function get() {
      return this._definitions;
    }

    /**
     * @returns {boolean}
     */

  }, {
    key: 'frozen',
    get: function get() {
      return this._frozen;
    }

    /**
     * @param {boolean} value
     */
    ,
    set: function set(value) {
      this._frozen = value;
    }
  }, {
    key: 'instanceManager',
    get: function get() {
      if (!this._instanceManager) {
        this._instanceManager = new _InstanceManager2.default(this, this._definitions, this._alias);
      }
      return this._instanceManager;
    }
  }, {
    key: 'extensions',
    get: function get() {
      return this._extensions;
    }
  }, {
    key: 'logger',
    get: function get() {
      return this._logger;
    }

    /**
     * @param {Console|*} value
     */
    ,
    set: function set(value) {
      if (typeof value.warn !== 'function') {
        throw new _LoggerWarnMethodNotFoundException2.default();
      }
      this._logger = value;
    }

    /**
     * @return {Map}
     */

  }, {
    key: 'services',
    get: function get() {
      return this._container;
    }
  }]);

  return ContainerBuilder;
}();

exports.default = ContainerBuilder;