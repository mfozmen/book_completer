'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _Reference = require('./../Reference');

var _Reference2 = _interopRequireDefault(_Reference);

var _PackageReference = require('./../PackageReference');

var _PackageReference2 = _interopRequireDefault(_PackageReference);

var _Definition = require('./../Definition');

var _Definition2 = _interopRequireDefault(_Definition);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FileLoader = function () {
  /**
   * @param {ContainerBuilder} container
   */
  function FileLoader(container) {
    _classCallCheck(this, FileLoader);

    this._container = container;
  }

  /**
   * @param {string} file
   * @protected
   */


  _createClass(FileLoader, [{
    key: '_checkFile',
    value: function _checkFile(file) {
      this.filePath = file;
    }

    /**
     * @returns {ContainerBuilder}
     */

  }, {
    key: '_parseDefinitions',


    /**
     * @param {Array<*>} services
     *
     * @protected
     */
    value: function _parseDefinitions() {
      var services = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      for (var id in services) {
        if (services.hasOwnProperty(id)) {
          this._parseDefinition(services, id);
        }
      }
    }

    /**
     * @param {*} services
     * @param {string} id
     * @private
     */

  }, {
    key: '_parseDefinition',
    value: function _parseDefinition(services, id) {
      var service = services[id];

      if (typeof service === 'string') {
        this.container.setAlias(id, service.slice(1));
      } else if (service.factory) {
        this.container.setDefinition(id, this._getFactoryDefinition(service));
      } else {
        this.container.setDefinition(id, this._getDefinition(service));
      }
    }

    /**
     * @param {*} service
     * @returns {Definition}
     * @private
     */

  }, {
    key: '_getFactoryDefinition',
    value: function _getFactoryDefinition(service) {
      var object = null;

      if (service.factory.class.includes('@', 0)) {
        object = new _Reference2.default(service.factory.class.slice(1));
      } else {
        object = this._requireClassNameFromPath(service.factory.class);
      }

      var definition = new _Definition2.default();
      definition.shared = service.shared;
      definition.setFactory(object, service.factory.method);
      definition.args = this._getParsedArguments(service.arguments);

      return definition;
    }

    /**
     * @param {*} service
     * @returns {Definition}
     * @private
     */

  }, {
    key: '_getDefinition',
    value: function _getDefinition(service) {
      var definition = void 0;

      if (!service.synthetic) {
        var object = this._requireClassNameFromPath(service.class);
        definition = new _Definition2.default(object);
        definition.lazy = service.lazy || false;
        definition.public = service.public !== false;
        definition.abstract = service.abstract || false;
        definition.parent = service.parent;
        definition.decoratedService = service.decorates;
        definition.decorationPriority = service.decoration_priority;
        definition.deprecated = service.deprecated;
        definition.shared = service.shared;

        this._parseArguments(definition, service.arguments);
        this._parseProperties(definition, service.properties);
        this._parseCalls(definition, service.calls);
        this._parseTags(definition, service.tags);
      } else {
        definition = new _Definition2.default();
        definition.synthetic = true;
      }

      return definition;
    }

    /**
     * @param {Definition} definition
     * @param {Array} calls
     * @private
     */

  }, {
    key: '_parseCalls',
    value: function _parseCalls(definition) {
      var _this = this;

      var calls = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      calls.map(function (call) {
        definition.addMethodCall(call.method, _this._getParsedArguments(call.arguments));
      });
    }

    /**
     * @param {Definition} definition
     * @param {Array} tags
     * @private
     */

  }, {
    key: '_parseTags',
    value: function _parseTags(definition) {
      var tags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      tags.map(function (tag) {
        definition.addTag(tag.name, FileLoader._parseTagAttributes(tag.attributes));
      });
    }

    /**
     * @param {Array} args
     * @returns {Array}
     * @private
     */

  }, {
    key: '_getParsedArguments',
    value: function _getParsedArguments() {
      var _this2 = this;

      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      var parsedArguments = [];
      args.map(function (argument) {
        parsedArguments.push(_this2._parseArgument(argument));
      });

      return parsedArguments;
    }

    /**
     * @param {*} attributes
     * @returns Map
     * @private
     */

  }, {
    key: '_parseProperties',


    /**
     * @param {Definition} definition
     * @param {Object} properties
     * @private
     */
    value: function _parseProperties(definition) {
      var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      for (var propertyKey in properties) {
        if (properties.hasOwnProperty(propertyKey)) {
          definition.addProperty(propertyKey, this._parseArgument(properties[propertyKey]));
        }
      }
    }

    /**
     * @param {Array<{resource}>} imports
     *
     * @protected
     */

  }, {
    key: '_parseImports',
    value: function _parseImports() {
      var imports = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = imports[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var file = _step.value;

          var workingPath = this.filePath;
          this.load(_path2.default.join(_path2.default.dirname(this.filePath), file.resource));
          this.filePath = workingPath;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    /**
     * @param {*} parameters
     *
     * @protected
     */

  }, {
    key: '_parseParameters',
    value: function _parseParameters() {
      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      for (var key in parameters) {
        if (parameters.hasOwnProperty(key)) {
          this._container.setParameter(key, parameters[key]);
        }
      }
    }

    /**
     * @param {Definition} definition
     * @param {Array} args
     *
     * @private
     */

  }, {
    key: '_parseArguments',
    value: function _parseArguments(definition) {
      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      var argument = definition.abstract ? 'appendArgs' : 'args';
      definition[argument] = this._getParsedArguments(args);
    }

    /**
     * @param {string} argument
     * @returns {*}
     *
     * @private
     */

  }, {
    key: '_parseArgument',
    value: function _parseArgument(argument) {
      if (typeof argument === 'boolean') {
        return argument;
      }

      if (argument.slice(0, 2) === '@?') {
        return new _Reference2.default(argument.slice(2), true);
      } else if (argument.slice(0, 1) === '@') {
        return new _Reference2.default(argument.slice(1));
      } else if (argument.slice(0, 1) === '%' && argument.slice(-1) === '%') {
        return this._container.getParameter(argument.slice(1, -1));
      } else if (argument.slice(0, 1) === '%') {
        return new _PackageReference2.default(argument.slice(1));
      }

      return argument;
    }

    /**
     * @param {string} classObject
     * @returns {*}
     *
     * @private
     */

  }, {
    key: '_requireClassNameFromPath',
    value: function _requireClassNameFromPath(classObject) {
      var fromDirectory = !_path2.default.isAbsolute(classObject) ? _path2.default.dirname(this.filePath) : '/';
      fromDirectory = this.container.defaultDir || fromDirectory;
      return require(_path2.default.join(fromDirectory, classObject)).default;
    }
  }, {
    key: 'container',
    get: function get() {
      return this._container;
    }

    /**
     * @returns {string}
     */

  }, {
    key: 'filePath',
    get: function get() {
      return this._filePath;
    }

    /**
     * @param {string} value
     */
    ,
    set: function set(value) {
      this._filePath = value;
    }
  }], [{
    key: '_parseTagAttributes',
    value: function _parseTagAttributes(attributes) {
      var map = new Map();

      if (attributes) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = Object.keys(attributes)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var key = _step2.value;

            map.set(key, attributes[key]);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }

      return map;
    }
  }]);

  return FileLoader;
}();

exports.default = FileLoader;