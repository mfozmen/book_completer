'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Reference = require('./Reference');

var _Reference2 = _interopRequireDefault(_Reference);

var _PackageReference = require('./PackageReference');

var _PackageReference2 = _interopRequireDefault(_PackageReference);

var _PrivateServiceException = require('./Exception/PrivateServiceException');

var _PrivateServiceException2 = _interopRequireDefault(_PrivateServiceException);

var _ServiceNotFoundException = require('./Exception/ServiceNotFoundException');

var _ServiceNotFoundException2 = _interopRequireDefault(_ServiceNotFoundException);

var _NotAbstractServiceException = require('./Exception/NotAbstractServiceException');

var _NotAbstractServiceException2 = _interopRequireDefault(_NotAbstractServiceException);

var _MethodCallNotFoundException = require('./Exception/MethodCallNotFoundException');

var _MethodCallNotFoundException2 = _interopRequireDefault(_MethodCallNotFoundException);

var _AbstractServiceException = require('./Exception/AbstractServiceException');

var _AbstractServiceException2 = _interopRequireDefault(_AbstractServiceException);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var InstanceManager = function () {
  /**
   * @param {ContainerBuilder} containerBuilder
   * @param {Map} definitions
   * @param {Map} alias
   */
  function InstanceManager(containerBuilder, definitions, alias) {
    _classCallCheck(this, InstanceManager);

    this._containerBuilder = containerBuilder;
    this._definitions = definitions;
    this._alias = alias;
  }

  /**
   * @param {string} id
   * @param {boolean} bypassPublic
   * @returns {*}
   */


  _createClass(InstanceManager, [{
    key: 'getInstance',
    value: function getInstance(id) {
      var bypassPublic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      id = this._alias.get(id) || id;

      if (id === 'service_container' && this._containerBuilder.containerReferenceAsService) {
        return this._containerBuilder;
      }

      if (this._definitions.has(id)) {
        return this._getInstanceFromId(id, bypassPublic);
      }

      throw new _ServiceNotFoundException2.default(id);
    }

    /**
     * @param {string} id
     * @param {boolean} bypassPublic
     * @returns {*}
     * @private
     */

  }, {
    key: '_getInstanceFromId',
    value: function _getInstanceFromId(id) {
      var bypassPublic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var definition = this._definitions.get(id);

      if (!definition.public && !bypassPublic) {
        throw new _PrivateServiceException2.default(id);
      }

      if (definition.abstract) {
        throw new _AbstractServiceException2.default(id);
      }

      if (definition.deprecated) {
        this._containerBuilder.logger.warn('DEPRECATED', definition.deprecated);
      }

      if (definition.Object || definition.factory || !definition.Object && definition.synthetic) {
        return this._getExistingInstanceFromId(id, bypassPublic);
      }

      throw new _ServiceNotFoundException2.default(id);
    }

    /**
     * @param {string} id
     * @param {boolean} bypassPublic
     * @returns {*}
     * @private
     */

  }, {
    key: '_getExistingInstanceFromId',
    value: function _getExistingInstanceFromId(id) {
      var bypassPublic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var definition = this._definitions.get(id);

      if (definition.shared === false) {
        return this.getInstanceFromDefinition(definition);
      }

      if (this._containerBuilder.services.has(id) && definition.isPublic(bypassPublic)) {
        return this._containerBuilder.services.get(id);
      }

      var instance = this.getInstanceFromDefinition(definition);
      this._containerBuilder.services.set(id, instance);

      return instance;
    }

    /**
     * @param {Definition} definition
     * @returns {*}
     */

  }, {
    key: 'getInstanceFromDefinition',
    value: function getInstanceFromDefinition(definition) {
      if (definition.factory) {
        return this._getInstanceFromFactory(definition);
      }

      if (!definition.synthetic) {
        return this._getNotSyntheticInstanceFromDefinition(definition);
      }
    }

    /**
     * @param {Definition} definition
     * @return {*}
     * @private
     */

  }, {
    key: '_getNotSyntheticInstanceFromDefinition',
    value: function _getNotSyntheticInstanceFromDefinition(definition) {
      var args = this._resolveArguments(definition.args);

      if (definition.parent) {
        args = this._appendParentArgumentsFromDefinition(definition, args);
      }

      var instance = new (Function.prototype.bind.apply(definition.Object, [null].concat(_toConsumableArray(args))))();

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = definition.properties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _ref = _step.value;

          var _ref2 = _slicedToArray(_ref, 2);

          var key = _ref2[0];
          var value = _ref2[1];

          instance[key] = this._resolveServices(value);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = definition.calls[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var call = _step2.value;

          this._callMethod(instance, call);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return instance;
    }

    /**
     * @param {Definition} definition
     * @returns {*}
     *
     * @private
     */

  }, {
    key: '_getInstanceFromFactory',
    value: function _getInstanceFromFactory(definition) {
      var _definition$factory$O;

      var args = this._resolveArguments(definition.args);

      if (definition.factory.Object instanceof _Reference2.default) {
        var _factoryService$const;

        var factoryService = this._containerBuilder.get(definition.factory.Object.id);

        return (_factoryService$const = factoryService.constructor)[definition.factory.method].apply(_factoryService$const, _toConsumableArray(args));
      }

      return (_definition$factory$O = definition.factory.Object)[definition.factory.method].apply(_definition$factory$O, _toConsumableArray(args));
    }

    /**
     * @param {Array} args
     * @returns {Array}
     *
     * @private
     */

  }, {
    key: '_resolveArguments',
    value: function _resolveArguments() {
      var _this = this;

      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      var resolvedArgument = [];
      args.map(function (argument) {
        resolvedArgument.push(_this._resolveServices(argument));
      });

      return resolvedArgument;
    }

    /**
     * @param {Definition} definition
     * @param {Array} args
     * @return {Array}
     * @private
     */

  }, {
    key: '_appendParentArgumentsFromDefinition',
    value: function _appendParentArgumentsFromDefinition(definition) {
      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      var parentDefinition = this._definitions.get(definition.parent);
      if (!parentDefinition.abstract) {
        throw new _NotAbstractServiceException2.default(definition.parent);
      }

      return args.concat(this._resolveArguments(parentDefinition.appendArgs));
    }

    /**
     * @param {Reference|PackageReference|*} value
     * @returns {*}
     *
     * @private
     */

  }, {
    key: '_resolveServices',
    value: function _resolveServices(value) {
      if (value instanceof _Reference2.default) {
        if (!value.nullable || value.nullable && this._containerBuilder.hasDefinition(value.id)) {
          return this.getInstance(value.id, true);
        }
      } else if (value instanceof _PackageReference2.default) {
        return require(value.id);
      } else {
        return value;
      }

      return null;
    }

    /**
     * @param {*} service
     * @param {{method, args}} call
     *
     * @private
     */

  }, {
    key: '_callMethod',
    value: function _callMethod(service, call) {
      if (typeof service[call.method] !== 'function') {
        throw new _MethodCallNotFoundException2.default(call.method);
      }

      var args = this._resolveArguments(call.args);

      service[call.method].apply(service, _toConsumableArray(args));
    }
  }]);

  return InstanceManager;
}();

exports.default = InstanceManager;