'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _MethodCallEmptyException = require('./Exception/MethodCallEmptyException');

var _MethodCallEmptyException2 = _interopRequireDefault(_MethodCallEmptyException);

var _AttributesMapException = require('./Exception/AttributesMapException');

var _AttributesMapException2 = _interopRequireDefault(_AttributesMapException);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Definition = function () {
  /**
   * @param {*|null} Object
   * @param {Array} args
   */
  function Definition() {
    var Object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    _classCallCheck(this, Definition);

    this._Object = Object;
    this._args = args;
    this._calls = [];
    this._tags = [];
    this._properties = new Map();
    this._lazy = false;
    this._deprecated = null;
    this._factory = null;
    this._public = true;
    this._synthetic = false;
    this._decoratedService = null;
    this._decorationPriority = null;
    this._shared = true;
    this._abstract = false;
    this._appendArgs = [];
    this._parent = null;
  }

  /**
   * @return {boolean}
   */


  _createClass(Definition, [{
    key: 'setFactory',


    /**
     * @param {Object|Reference} Object
     * @param {string} method
     */
    value: function setFactory(Object, method) {
      this._factory = {
        Object: Object,
        method: method
      };
    }

    /**
     * @returns {null|{Object: (Object|Reference), method: string}|*}
     */

  }, {
    key: 'addArgument',


    /**
     * @param {*} argument
     * @returns {Definition}
     */
    value: function addArgument(argument) {
      this._args.push(argument);

      return this;
    }

    /**
     * @param {string} method
     * @param {Array} args
     */

  }, {
    key: 'addMethodCall',
    value: function addMethodCall(method) {
      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      if (method.length === 0) {
        throw new _MethodCallEmptyException2.default();
      }

      this._calls.push({ method: method, args: args });

      return this;
    }

    /**
     * @param {string} name
     * @param {Map} attributes
     * @returns {Definition}
     */

  }, {
    key: 'addTag',
    value: function addTag(name) {
      var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();

      if (attributes instanceof Map) {
        this._tags.push({ name: name, attributes: attributes });

        return this;
      }

      throw new _AttributesMapException2.default();
    }

    /**
     * @param {string} key
     * @param {*} value
     * @returns {Definition}
     */

  }, {
    key: 'addProperty',
    value: function addProperty(key, value) {
      this._properties.set(key, value);

      return this;
    }

    /**
     * @returns {boolean}
     */

  }, {
    key: 'isPublic',


    /**
     * @param {boolean} bypassPublic
     * @return {boolean}
     */
    value: function isPublic() {
      var bypassPublic = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      return this.public || !bypassPublic && this.public;
    }
  }, {
    key: 'abstract',
    get: function get() {
      return this._abstract;
    }

    /**
     * @param {boolean} value
     */
    ,
    set: function set(value) {
      this._abstract = value;
    }

    /**
     * @returns {string}
     */

  }, {
    key: 'decoratedService',
    get: function get() {
      return this._decoratedService;
    }

    /**
     * @param {string} value
     */
    ,
    set: function set(value) {
      this._decoratedService = value;
    }

    /**
     * @return {number}
     */

  }, {
    key: 'decorationPriority',
    get: function get() {
      return this._decorationPriority;
    }

    /**
     * @param {number} value
     */
    ,
    set: function set(value) {
      this._decorationPriority = value;
    }

    /**
     * @returns {boolean}
     */

  }, {
    key: 'public',
    get: function get() {
      return this._public;
    }

    /**
     * @param {boolean} value
     */
    ,
    set: function set(value) {
      this._public = value;
    }
  }, {
    key: 'factory',
    get: function get() {
      return this._factory;
    }

    /**
     * @returns {null|string}
     */

  }, {
    key: 'deprecated',
    get: function get() {
      return this._deprecated;
    }

    /**
     * @param {null|string} value
     */
    ,
    set: function set(value) {
      this._deprecated = value;
    }

    /**
     * @returns {boolean}
     */

  }, {
    key: 'lazy',
    get: function get() {
      return this._lazy;
    }

    /**
     * @param {boolean} value
     */
    ,
    set: function set(value) {
      this._lazy = value;
    }

    /**
     * @returns {*}
     */

  }, {
    key: 'Object',
    get: function get() {
      return this._Object;
    }

    /**
     * @param {*} value
     */
    ,
    set: function set(value) {
      this._Object = value;
    }

    /**
     * @returns {Array}
     */

  }, {
    key: 'args',
    get: function get() {
      return this._args;
    }

    /**
     * @returns {Array}
     */
    ,


    /**
     * @param {Array} args
     */
    set: function set(args) {
      this._args = args;
    }

    /**
     * @param {Array} appendArgs
     */

  }, {
    key: 'calls',
    get: function get() {
      return this._calls;
    }

    /**
     * @returns {Array}
     */

  }, {
    key: 'tags',
    get: function get() {
      return this._tags;
    }

    /**
     * @returns {Map}
     */

  }, {
    key: 'properties',
    get: function get() {
      return this._properties;
    }
  }, {
    key: 'appendArgs',
    set: function set(appendArgs) {
      this._appendArgs = appendArgs;
    }

    /**
     * @return {Array}
     */
    ,
    get: function get() {
      return this._appendArgs;
    }
  }, {
    key: 'synthetic',
    get: function get() {
      return this._synthetic;
    }

    /**
     * @param {boolean} value
     */
    ,
    set: function set(value) {
      this._synthetic = value;
    }

    /**
     * @returns {boolean}
     */

  }, {
    key: 'shared',
    get: function get() {
      return this._shared;
    }

    /**
     * @param {boolean} value
     */
    ,
    set: function set(value) {
      this._shared = value;
    }

    /**
     * @return {string}
     */

  }, {
    key: 'parent',
    get: function get() {
      return this._parent;
    }

    /**
     * @param {string} value
     */
    ,
    set: function set(value) {
      this._parent = value;
    }
  }]);

  return Definition;
}();

exports.default = Definition;