'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FileManager = function () {
  /**
   * @param {YamlAdapter|JsAdapter|JsonAdapter} adapter
   * @param {fs} fs
   * @param {path} path
   */
  function FileManager(adapter, fs, path) {
    _classCallCheck(this, FileManager);

    this._adapter = adapter;
    this._fs = fs;
    this._path = path;
  }

  /**
   * @param {string} dir
   * @param {string} name
   * @return {boolean}
   */


  _createClass(FileManager, [{
    key: 'createConfiguration',
    value: function createConfiguration(dir) {
      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'services';

      var completePath = this._path.format({
        dir: dir,
        base: name + '.' + this._adapter.constructor.FORMAT
      });

      try {
        this._fs.writeFileSync(completePath, this._adapter.defaultConfiguration);

        return true;
      } catch (e) {
        return false;
      }
    }
  }]);

  return FileManager;
}();

exports.default = FileManager;