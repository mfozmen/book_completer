#! /usr/bin/env node
'use strict';

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _YamlAdapter = require('./Services/File/YamlAdapter');

var _YamlAdapter2 = _interopRequireDefault(_YamlAdapter);

var _JsAdapter = require('./Services/File/JsAdapter');

var _JsAdapter2 = _interopRequireDefault(_JsAdapter);

var _JsonAdapter = require('./Services/File/JsonAdapter');

var _JsonAdapter2 = _interopRequireDefault(_JsonAdapter);

var _lib = require('../lib/');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var regex = new RegExp('(' + _YamlAdapter2.default.FORMAT + '|' + _JsonAdapter2.default.FORMAT + '|' + _JsAdapter2.default.FORMAT + ')');
var format = _YamlAdapter2.default.FORMAT;

_commander2.default.option('-n, --name [name]', 'File name', 'services').option('-f, --format [format]', 'Configuration file format', regex, format).arguments('<path>').action(function (dir) {
  var container = new _lib.ContainerBuilder();
  var loader = new _lib.YamlFileLoader(container);
  loader.load(_path2.default.join(__dirname, 'Resources', 'services.yaml'));

  console.log('\n' + _chalk2.default.bold.blue('Creating empty ' + _commander2.default.format + ' configuration file...') + '\n\nPath: ' + _chalk2.default.green(dir) + '\nFile name: ' + _chalk2.default.green(_commander2.default.name) + '\nFile format: ' + _chalk2.default.green(_commander2.default.format) + '\n');

  var fileManager = container.get('ndi.file.file_manager.' + _commander2.default.format);
  if (fileManager.createConfiguration(dir, _commander2.default.name)) {
    console.log(_chalk2.default.bold.green('Configuration file created successfully!'));
  } else {
    console.error(_chalk2.default.bold.red('Wait! Error creating configuration file!'));
  }
}).parse(process.argv);

if (!process.argv.slice(2).length) {
  _commander2.default.outputHelp(function (helpText) {
    return _chalk2.default.bold.red(helpText);
  });
}