#! /usr/bin/env node
'use strict';

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _lib = require('../lib/');

var _JsAdapter = require('./Services/File/JsAdapter');

var _JsAdapter2 = _interopRequireDefault(_JsAdapter);

var _JsonAdapter = require('./Services/File/JsonAdapter');

var _JsonAdapter2 = _interopRequireDefault(_JsonAdapter);

var _JsFileLoader = require('../lib/Loader/JsFileLoader');

var _JsFileLoader2 = _interopRequireDefault(_JsFileLoader);

var _JsonFileLoader = require('../lib/Loader/JsonFileLoader');

var _JsonFileLoader2 = _interopRequireDefault(_JsonFileLoader);

require('console.table');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_commander2.default.arguments('<path> <service>').action(function (dir, service) {
  var container = new _lib.ContainerBuilder();
  dir = _path2.default.isAbsolute(dir) ? dir : _path2.default.join(process.cwd(), dir);
  var loader = void 0;

  switch (_path2.default.extname(dir)) {
    case _JsAdapter2.default.FORMAT:
      loader = new _JsFileLoader2.default(container);
      break;
    case _JsonAdapter2.default.FORMAT:
      loader = new _JsonFileLoader2.default(container);
      break;
    default:
      loader = new _lib.YamlFileLoader(container);
  }

  console.info(_chalk2.default.blue('Checking ' + dir + '...\n'));

  try {
    loader.load(dir);
  } catch (e) {
    console.info(_chalk2.default.bold.red('ERROR! ' + e.message));
    process.exit(1);
  }

  var def = container.definitions.get(service);
  if (!def) {
    console.info(_chalk2.default.bold.red('Service `' + service + '` not found'));
    process.exit(1);
  }

  var argumentText = '';
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = def.args[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var argument = _step.value;

      argumentText += '\n\t- ' + argument.constructor.name + ':\t' + _chalk2.default.green(argument.id);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  console.table([{
    Attribute: 'Key',
    Value: service
  }, {
    Attribute: 'Class Name',
    Value: def.Object.name
  }, {
    Attribute: 'Arguments',
    Value: argumentText
  }, {
    Attribute: 'Public',
    Value: def.public.toString()
  }, {
    Attribute: 'Calls',
    Value: def.calls.length > 0 ? _util2.default.inspect(def.calls, false, null) : '[]'
  }, {
    Attribute: 'Tags',
    Value: def.tags.length > 0 ? _util2.default.inspect(def.tags, false, null) : '[]'
  }, {
    Attribute: 'Properties',
    Value: def.properties.size > 0 ? _util2.default.inspect(def.properties, false, null) : '[]'
  }, {
    Attribute: 'Laziness',
    Value: def.lazy.toString()
  }, {
    Attribute: 'Deprecated Message',
    Value: def.deprecated
  }, {
    Attribute: 'Factory',
    Value: _util2.default.inspect(def.factory)
  }, {
    Attribute: 'Synthetic',
    Value: def.synthetic.toString()
  }, {
    Attribute: 'Decoration',
    Value: def.decoratedService ? def.decoratedService + ' ' + def.decorationPriority : 'null'
  }, {
    Attribute: 'Shared',
    Value: def.shared
  }, {
    Attribute: 'Parent',
    Value: def.parent
  }]);

  process.exit(0);
}).parse(process.argv);

if (!process.argv.slice(2).length) {
  _commander2.default.outputHelp(function (helpText) {
    return _chalk2.default.bold.red(helpText);
  });
}